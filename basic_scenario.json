{
    "server_setting": {
        "HOST": "s1",
        "state_machine": 
        {
            "states": {
                "init": {
                    "transitions": [
                        {
                            "transiotion_condition": "p['TCP'].flags == 'S'",
                            "transition_response": "ip = IP(src=p['IP'].dst, dst=p['IP'].src)/TCP( flags='SA', sport=p['TCP'].dport, dport=p['TCP'].sport, seq = 0, ack = p['TCP'].seq + 1, )\npair = send(ip, verbose=30)",
                            "next_state": "3WHS_SYN"
                        },
                        {
                            "transiotion_condition": "p['TCP'].flags == 'F'",
                            "next_state": "FIN"
                        }
                    ] 
        
                },
                "3WHS_SYN": {
                    "transitions": [
                        {
                            "transiotion_condition": "p['TCP'].flags == 'A'",
                            "transition_response": "print('3way hand shake competed')",
                            "next_state": "3WHS_COMPLETE"
                        },
                        {
                            "transiotion_condition": "p['TCP'].flags == 'F'",
                            "transition_response": "print('closing connection... ')",
                            "next_state": "FIN"
                        }
                    ]
                },
                "3WHS_COMPLETE": {
                    "transitions": [
                        {
                            "transiotion_condition": "p['TCP'].flags == 'PA'",
                            "transition_response": "print(p[TCP].payload)\nip = IP(src=p['IP'].dst, dst=p['IP'].src)/TCP( flags='A', sport=p['TCP'].dport, dport=p['TCP'].sport, seq = p['TCP'].ack, ack = p['TCP'].seq + len(p['TCP'].payload), )\npair = send(ip, verbose=30)",
                            "next_state": "3WHS_COMPLETE"
                        },
                        {
                            "transiotion_condition": "p['TCP'].flags == 'F'",
                            "next_state": "FIN"
                        }
                    ]
                },
                "FIN": {
                    "pre_state": "scapy code to colse connection and kill thread",
                    "transitions": [
                        {
                            "transition_condition": "p[flag] = 'ACK'",
                            "transition_response": "multi line scapy code",
                            "next_state": "3WHS_COMPLETE"
                        }
                    ]
                }
            }
        }
    },
    "clients_settings": [
        {
            "HOST": "c1",
            "script_path": "/root/reverse_nmap/scripts/run_nc_client.sh"
        }
    ],
    "sniffer_settings": {
        "HOST": "sniffer",
        "script_path": "/root/reverse_nmap/scripts/sniffer.sh"
    }
}